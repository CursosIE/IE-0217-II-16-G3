public class TicTacToe {
 
    int[][] matrix;
 
    /** Initialize your data structure here. */
    public TicTacToe(int n) {
        matrix = new int[n][n]; //(1) asignación
    }
 
    /** Player {player} makes a move at ({row}, {col}).
        @param row The row of the board.
        @param col The column of the board.
        @param player The player, can be either 1 or -1.
        @return The current winning condition, can be either:
                0: No one wins.
                1: Player 1 wins.
                -1: Player 2 wins. */
    int move(int row, int col, int player) {
        matrix[row][col]=player; //(1) asignacion, (1) acceso a memoria
 
        //check row
        boolean win=true; //(1) asignacion
        for(int i=0; i<matrix.length; i++){ // [(1) asignación, (1) comparación, (1) incremento] se ejecuta n veces
            if(matrix[row][i]!=player){  // (1) acceso a memoria, (1) comparación
                win=false; //(1) asignación
                break; // (1) intrucción
            }
        }
 
        if(win) return player; // (1) comparación, (1) instrucción
 
        //check column
        win=true; //(1) asignación
        for(int i=0; i<matrix.length; i++){ // [(1) asignación, (1) comparación, (1) incremento] se ejecuta n veces
            if(matrix[i][col]!=player){ // (1) acceso a memoria, (1) comparación
                win=false; //(1) asignación
                break; // (1) intrucción
            }
        }
 
        if(win) return player; // (1) comparación, (1) instrucción
 
        //check back diagonal
        win=true; //(1) asignación
        for(int i=0; i<matrix.length; i++){ // [(1) asignación, (1) comparación, (1) incremento] se ejecuta n veces
            if(matrix[i][i]!=player){ // (1) acceso a memoria, (1) comparación
                win=false; //(1) asignación
                break; // (1) intrucción
            }
        }
 
        if(win) return player; //(1) comparación, (1) instrucción
 
        //check forward diagonal
        win=true; //(1) asignación
        for(int i=0; i<matrix.length; i++){ // [(1) asignación, (1) comparación, (1) incremento] se ejecuta n veces
            if(matrix[i][matrix.length-i-1]!=player){ // (1) acceso a memoria, (1) comparación
                win=false; //(1) asignación
                break;  // (1) intrucción
            }
        }
 
        if(win) return player; //(1) comparación, (1) instrucción
 
        return 0; //(1) instrucción
    }
    
    int main()
    {
        int player = -1; //(1) asignación
        
        boolean end = false; //(1) asignación
        
        int n = 3; //(1) asignación
        int r, c, result; //(1) asignación
        
        TicTacToe ttt = new TicTacToe(n); //(1) declaración
        while(!end) //se ejecuta n^2
        {
            player *= -1 //(1) asignación, (1) multiplicación
            r =  randomInt(0, 3);//(1) función randomInt, (1) asignación
            c =  randomInt(0, 3);//(1) función randomInt, (1) asignación
            
            result = move(player, r, c); // función move, (1) asignación
            if(result != 0) //(1) comparación
            {
                print("player " + result + " won."); //(1) función print
                end = true; //(1) asignación
            }
        }
        return 0; //(1) instrucción
    }
}
